<?php
/**
 * CaseAnnotation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Legal Data API
 *
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CaseAnnotation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CaseAnnotation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CaseAnnotation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'belongs_to' => 'int',
        'label' => 'int',
        'value_str' => 'string',
        'value_int' => 'int',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'belongs_to' => null,
        'label' => null,
        'value_str' => null,
        'value_int' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'belongs_to' => 'belongs_to',
        'label' => 'label',
        'value_str' => 'value_str',
        'value_int' => 'value_int',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'belongs_to' => 'setBelongsTo',
        'label' => 'setLabel',
        'value_str' => 'setValueStr',
        'value_int' => 'setValueInt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'belongs_to' => 'getBelongsTo',
        'label' => 'getLabel',
        'value_str' => 'getValueStr',
        'value_int' => 'getValueInt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['belongs_to'] = isset($data['belongs_to']) ? $data['belongs_to'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['value_str'] = isset($data['value_str']) ? $data['value_str'] : null;
        $this->container['value_int'] = isset($data['value_int']) ? $data['value_int'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['belongs_to'] === null) {
            $invalidProperties[] = "'belongs_to' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if (!is_null($this->container['value_str']) && (mb_strlen($this->container['value_str']) > 250)) {
            $invalidProperties[] = "invalid value for 'value_str', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['value_int']) && ($this->container['value_int'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'value_int', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['value_int']) && ($this->container['value_int'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'value_int', must be bigger than or equal to -2147483648.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets belongs_to
     *
     * @return int
     */
    public function getBelongsTo()
    {
        return $this->container['belongs_to'];
    }

    /**
     * Sets belongs_to
     *
     * @param int $belongs_to belongs_to
     *
     * @return $this
     */
    public function setBelongsTo($belongs_to)
    {
        $this->container['belongs_to'] = $belongs_to;

        return $this;
    }

    /**
     * Gets label
     *
     * @return int
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param int $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets value_str
     *
     * @return string
     */
    public function getValueStr()
    {
        return $this->container['value_str'];
    }

    /**
     * Sets value_str
     *
     * @param string $value_str value_str
     *
     * @return $this
     */
    public function setValueStr($value_str)
    {
        if (!is_null($value_str) && (mb_strlen($value_str) > 250)) {
            throw new \InvalidArgumentException('invalid length for $value_str when calling CaseAnnotation., must be smaller than or equal to 250.');
        }

        $this->container['value_str'] = $value_str;

        return $this;
    }

    /**
     * Gets value_int
     *
     * @return int
     */
    public function getValueInt()
    {
        return $this->container['value_int'];
    }

    /**
     * Sets value_int
     *
     * @param int $value_int value_int
     *
     * @return $this
     */
    public function setValueInt($value_int)
    {

        if (!is_null($value_int) && ($value_int > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $value_int when calling CaseAnnotation., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($value_int) && ($value_int < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $value_int when calling CaseAnnotation., must be bigger than or equal to -2147483648.');
        }

        $this->container['value_int'] = $value_int;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Entry is created at this date time
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date time of last change
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


