<?php
/**
 * CaseSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Legal Data API
 *
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CaseSearch Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CaseSearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CaseSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'slug' => 'string',
        'date' => '\DateTime',
        'court_jurisdiction' => 'string',
        'court_level_of_appeal' => 'string',
        'decision_type' => 'string',
        'court' => 'string',
        'text' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'slug' => null,
        'date' => 'date',
        'court_jurisdiction' => null,
        'court_level_of_appeal' => null,
        'decision_type' => null,
        'court' => null,
        'text' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'slug' => 'slug',
        'date' => 'date',
        'court_jurisdiction' => 'court_jurisdiction',
        'court_level_of_appeal' => 'court_level_of_appeal',
        'decision_type' => 'decision_type',
        'court' => 'court',
        'text' => 'text',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'slug' => 'setSlug',
        'date' => 'setDate',
        'court_jurisdiction' => 'setCourtJurisdiction',
        'court_level_of_appeal' => 'setCourtLevelOfAppeal',
        'decision_type' => 'setDecisionType',
        'court' => 'setCourt',
        'text' => 'setText',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'slug' => 'getSlug',
        'date' => 'getDate',
        'court_jurisdiction' => 'getCourtJurisdiction',
        'court_level_of_appeal' => 'getCourtLevelOfAppeal',
        'decision_type' => 'getDecisionType',
        'court' => 'getCourt',
        'text' => 'getText',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['court_jurisdiction'] = isset($data['court_jurisdiction']) ? $data['court_jurisdiction'] : null;
        $this->container['court_level_of_appeal'] = isset($data['court_level_of_appeal']) ? $data['court_level_of_appeal'] : null;
        $this->container['decision_type'] = isset($data['decision_type']) ? $data['decision_type'] : null;
        $this->container['court'] = isset($data['court']) ? $data['court'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) > 200)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Used to urls (consists of court, date, file number)
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        if ((mb_strlen($slug) > 200)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling CaseSearch., must be smaller than or equal to 200.');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Publication date as in source
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets court_jurisdiction
     *
     * @return string
     */
    public function getCourtJurisdiction()
    {
        return $this->container['court_jurisdiction'];
    }

    /**
     * Sets court_jurisdiction
     *
     * @param string $court_jurisdiction court_jurisdiction
     *
     * @return $this
     */
    public function setCourtJurisdiction($court_jurisdiction)
    {
        $this->container['court_jurisdiction'] = $court_jurisdiction;

        return $this;
    }

    /**
     * Gets court_level_of_appeal
     *
     * @return string
     */
    public function getCourtLevelOfAppeal()
    {
        return $this->container['court_level_of_appeal'];
    }

    /**
     * Sets court_level_of_appeal
     *
     * @param string $court_level_of_appeal court_level_of_appeal
     *
     * @return $this
     */
    public function setCourtLevelOfAppeal($court_level_of_appeal)
    {
        $this->container['court_level_of_appeal'] = $court_level_of_appeal;

        return $this;
    }

    /**
     * Gets decision_type
     *
     * @return string
     */
    public function getDecisionType()
    {
        return $this->container['decision_type'];
    }

    /**
     * Sets decision_type
     *
     * @param string $decision_type decision_type
     *
     * @return $this
     */
    public function setDecisionType($decision_type)
    {
        $this->container['decision_type'] = $decision_type;

        return $this;
    }

    /**
     * Gets court
     *
     * @return string
     */
    public function getCourt()
    {
        return $this->container['court'];
    }

    /**
     * Sets court
     *
     * @param string $court Responsible court entity
     *
     * @return $this
     */
    public function setCourt($court)
    {
        $this->container['court'] = $court;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


