<?php
/**
 * AnnotationLabel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Legal Data API
 *
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AnnotationLabel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnnotationLabel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnnotationLabel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'owner' => 'string',
        'trusted' => 'string',
        'name' => 'string',
        'slug' => 'string',
        'private' => 'bool',
        'many_annotations_per_label' => 'bool',
        'use_marker' => 'bool',
        'annotation_value_type' => 'string',
        'color' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'owner' => null,
        'trusted' => null,
        'name' => null,
        'slug' => 'slug',
        'private' => null,
        'many_annotations_per_label' => null,
        'use_marker' => null,
        'annotation_value_type' => null,
        'color' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'owner' => 'owner',
        'trusted' => 'trusted',
        'name' => 'name',
        'slug' => 'slug',
        'private' => 'private',
        'many_annotations_per_label' => 'many_annotations_per_label',
        'use_marker' => 'use_marker',
        'annotation_value_type' => 'annotation_value_type',
        'color' => 'color',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'owner' => 'setOwner',
        'trusted' => 'setTrusted',
        'name' => 'setName',
        'slug' => 'setSlug',
        'private' => 'setPrivate',
        'many_annotations_per_label' => 'setManyAnnotationsPerLabel',
        'use_marker' => 'setUseMarker',
        'annotation_value_type' => 'setAnnotationValueType',
        'color' => 'setColor',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'owner' => 'getOwner',
        'trusted' => 'getTrusted',
        'name' => 'getName',
        'slug' => 'getSlug',
        'private' => 'getPrivate',
        'many_annotations_per_label' => 'getManyAnnotationsPerLabel',
        'use_marker' => 'getUseMarker',
        'annotation_value_type' => 'getAnnotationValueType',
        'color' => 'getColor',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ANNOTATION_VALUE_TYPE_STR = 'str';
    const ANNOTATION_VALUE_TYPE_INT = 'int';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAnnotationValueTypeAllowableValues()
    {
        return [
            self::ANNOTATION_VALUE_TYPE_STR,
            self::ANNOTATION_VALUE_TYPE_INT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['trusted'] = isset($data['trusted']) ? $data['trusted'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['many_annotations_per_label'] = isset($data['many_annotations_per_label']) ? $data['many_annotations_per_label'] : null;
        $this->container['use_marker'] = isset($data['use_marker']) ? $data['use_marker'] : null;
        $this->container['annotation_value_type'] = isset($data['annotation_value_type']) ? $data['annotation_value_type'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) > 100)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be smaller than or equal to 100.";
        }

        if (!preg_match("/^[-a-zA-Z0-9_]+$/", $this->container['slug'])) {
            $invalidProperties[] = "invalid value for 'slug', must be conform to the pattern /^[-a-zA-Z0-9_]+$/.";
        }

        $allowedValues = $this->getAnnotationValueTypeAllowableValues();
        if (!is_null($this->container['annotation_value_type']) && !in_array($this->container['annotation_value_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'annotation_value_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 18)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['color']) && !preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['color'])) {
            $invalidProperties[] = "invalid value for 'color', must be conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets trusted
     *
     * @return string
     */
    public function getTrusted()
    {
        return $this->container['trusted'];
    }

    /**
     * Sets trusted
     *
     * @param string $trusted trusted
     *
     * @return $this
     */
    public function setTrusted($trusted)
    {
        $this->container['trusted'] = $trusted;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Verbose name, e.g. This Awesome annotation
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AnnotationLabel., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Identifier, e.g. this-awesome-annotation
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        if ((mb_strlen($slug) > 100)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling AnnotationLabel., must be smaller than or equal to 100.');
        }
        if ((!preg_match("/^[-a-zA-Z0-9_]+$/", $slug))) {
            throw new \InvalidArgumentException("invalid value for $slug when calling AnnotationLabel., must conform to the pattern /^[-a-zA-Z0-9_]+$/.");
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private Private annotations are only visible to its author
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets many_annotations_per_label
     *
     * @return bool
     */
    public function getManyAnnotationsPerLabel()
    {
        return $this->container['many_annotations_per_label'];
    }

    /**
     * Sets many_annotations_per_label
     *
     * @param bool $many_annotations_per_label A content object can have more than one annotation per label
     *
     * @return $this
     */
    public function setManyAnnotationsPerLabel($many_annotations_per_label)
    {
        $this->container['many_annotations_per_label'] = $many_annotations_per_label;

        return $this;
    }

    /**
     * Gets use_marker
     *
     * @return bool
     */
    public function getUseMarker()
    {
        return $this->container['use_marker'];
    }

    /**
     * Sets use_marker
     *
     * @param bool $use_marker Marker annotations are extracted from the text content and have a position in the text
     *
     * @return $this
     */
    public function setUseMarker($use_marker)
    {
        $this->container['use_marker'] = $use_marker;

        return $this;
    }

    /**
     * Gets annotation_value_type
     *
     * @return string
     */
    public function getAnnotationValueType()
    {
        return $this->container['annotation_value_type'];
    }

    /**
     * Sets annotation_value_type
     *
     * @param string $annotation_value_type Annotation values must be in this data type
     *
     * @return $this
     */
    public function setAnnotationValueType($annotation_value_type)
    {
        $allowedValues = $this->getAnnotationValueTypeAllowableValues();
        if (!is_null($annotation_value_type) && !in_array($annotation_value_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'annotation_value_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['annotation_value_type'] = $annotation_value_type;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        if (!is_null($color) && (mb_strlen($color) > 18)) {
            throw new \InvalidArgumentException('invalid length for $color when calling AnnotationLabel., must be smaller than or equal to 18.');
        }
        if (!is_null($color) && (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $color))) {
            throw new \InvalidArgumentException("invalid value for $color when calling AnnotationLabel., must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.");
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Entry is created at this date time
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date time of last change
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


