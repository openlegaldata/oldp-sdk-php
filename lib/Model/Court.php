<?php
/**
 * Court
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Legal Data API
 *
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Court Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Court implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Court';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'court_type' => 'string',
        'city' => 'int',
        'state' => 'int',
        'code' => 'string',
        'slug' => 'string',
        'description' => 'string',
        'image' => 'string',
        'homepage' => 'string',
        'street_address' => 'string',
        'postal_code' => 'string',
        'address_locality' => 'string',
        'telephone' => 'string',
        'fax_number' => 'string',
        'jurisdiction' => 'string',
        'level_of_appeal' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'court_type' => null,
        'city' => null,
        'state' => null,
        'code' => null,
        'slug' => 'slug',
        'description' => null,
        'image' => 'uri',
        'homepage' => 'uri',
        'street_address' => null,
        'postal_code' => null,
        'address_locality' => null,
        'telephone' => null,
        'fax_number' => null,
        'jurisdiction' => null,
        'level_of_appeal' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'court_type' => 'court_type',
        'city' => 'city',
        'state' => 'state',
        'code' => 'code',
        'slug' => 'slug',
        'description' => 'description',
        'image' => 'image',
        'homepage' => 'homepage',
        'street_address' => 'street_address',
        'postal_code' => 'postal_code',
        'address_locality' => 'address_locality',
        'telephone' => 'telephone',
        'fax_number' => 'fax_number',
        'jurisdiction' => 'jurisdiction',
        'level_of_appeal' => 'level_of_appeal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'court_type' => 'setCourtType',
        'city' => 'setCity',
        'state' => 'setState',
        'code' => 'setCode',
        'slug' => 'setSlug',
        'description' => 'setDescription',
        'image' => 'setImage',
        'homepage' => 'setHomepage',
        'street_address' => 'setStreetAddress',
        'postal_code' => 'setPostalCode',
        'address_locality' => 'setAddressLocality',
        'telephone' => 'setTelephone',
        'fax_number' => 'setFaxNumber',
        'jurisdiction' => 'setJurisdiction',
        'level_of_appeal' => 'setLevelOfAppeal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'court_type' => 'getCourtType',
        'city' => 'getCity',
        'state' => 'getState',
        'code' => 'getCode',
        'slug' => 'getSlug',
        'description' => 'getDescription',
        'image' => 'getImage',
        'homepage' => 'getHomepage',
        'street_address' => 'getStreetAddress',
        'postal_code' => 'getPostalCode',
        'address_locality' => 'getAddressLocality',
        'telephone' => 'getTelephone',
        'fax_number' => 'getFaxNumber',
        'jurisdiction' => 'getJurisdiction',
        'level_of_appeal' => 'getLevelOfAppeal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['court_type'] = isset($data['court_type']) ? $data['court_type'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['address_locality'] = isset($data['address_locality']) ? $data['address_locality'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['jurisdiction'] = isset($data['jurisdiction']) ? $data['jurisdiction'] : null;
        $this->container['level_of_appeal'] = isset($data['level_of_appeal']) ? $data['level_of_appeal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['court_type']) && (mb_strlen($this->container['court_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'court_type', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ((mb_strlen($this->container['code']) > 20)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) > 60)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be smaller than or equal to 60.";
        }

        if (!preg_match("/^[-a-zA-Z0-9_]+$/", $this->container['slug'])) {
            $invalidProperties[] = "invalid value for 'slug', must be conform to the pattern /^[-a-zA-Z0-9_]+$/.";
        }

        if (!is_null($this->container['homepage']) && (mb_strlen($this->container['homepage']) > 200)) {
            $invalidProperties[] = "invalid value for 'homepage', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['street_address']) && (mb_strlen($this->container['street_address']) > 200)) {
            $invalidProperties[] = "invalid value for 'street_address', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 200)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['address_locality']) && (mb_strlen($this->container['address_locality']) > 200)) {
            $invalidProperties[] = "invalid value for 'address_locality', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 200)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) > 200)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['jurisdiction']) && (mb_strlen($this->container['jurisdiction']) > 100)) {
            $invalidProperties[] = "invalid value for 'jurisdiction', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['level_of_appeal']) && (mb_strlen($this->container['level_of_appeal']) > 100)) {
            $invalidProperties[] = "invalid value for 'level_of_appeal', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Full name of the court with location
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets court_type
     *
     * @return string
     */
    public function getCourtType()
    {
        return $this->container['court_type'];
    }

    /**
     * Sets court_type
     *
     * @param string $court_type Court type AG,VG,...
     *
     * @return $this
     */
    public function setCourtType($court_type)
    {
        if (!is_null($court_type) && (mb_strlen($court_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $court_type when calling Court., must be smaller than or equal to 10.');
        }

        $this->container['court_type'] = $court_type;

        return $this;
    }

    /**
     * Gets city
     *
     * @return int
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param int $city Court belongs to this city, if null court is state-level
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state Court belongs to this state (derive country of this field)
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique court identifier based on ECLI (e.g. BVerfG)
     *
     * @return $this
     */
    public function setCode($code)
    {
        if ((mb_strlen($code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Court., must be smaller than or equal to 20.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Type & city name as lowercase
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        if ((mb_strlen($slug) > 60)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling Court., must be smaller than or equal to 60.');
        }
        if ((!preg_match("/^[-a-zA-Z0-9_]+$/", $slug))) {
            throw new \InvalidArgumentException("invalid value for $slug when calling Court., must conform to the pattern /^[-a-zA-Z0-9_]+$/.");
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage Official court homepage
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        if (!is_null($homepage) && (mb_strlen($homepage) > 200)) {
            throw new \InvalidArgumentException('invalid length for $homepage when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address Street address with house number
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        if (!is_null($street_address) && (mb_strlen($street_address) > 200)) {
            throw new \InvalidArgumentException('invalid length for $street_address when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal code (ZIP code)
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets address_locality
     *
     * @return string
     */
    public function getAddressLocality()
    {
        return $this->container['address_locality'];
    }

    /**
     * Sets address_locality
     *
     * @param string $address_locality Locality (city name)
     *
     * @return $this
     */
    public function setAddressLocality($address_locality)
    {
        if (!is_null($address_locality) && (mb_strlen($address_locality) > 200)) {
            throw new \InvalidArgumentException('invalid length for $address_locality when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['address_locality'] = $address_locality;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Telephone number
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if (!is_null($telephone) && (mb_strlen($telephone) > 200)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number Fax number
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (!is_null($fax_number) && (mb_strlen($fax_number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling Court., must be smaller than or equal to 200.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets jurisdiction
     *
     * @return string
     */
    public function getJurisdiction()
    {
        return $this->container['jurisdiction'];
    }

    /**
     * Sets jurisdiction
     *
     * @param string $jurisdiction Jurisdiction of court (ordinary, civil, ...)
     *
     * @return $this
     */
    public function setJurisdiction($jurisdiction)
    {
        if (!is_null($jurisdiction) && (mb_strlen($jurisdiction) > 100)) {
            throw new \InvalidArgumentException('invalid length for $jurisdiction when calling Court., must be smaller than or equal to 100.');
        }

        $this->container['jurisdiction'] = $jurisdiction;

        return $this;
    }

    /**
     * Gets level_of_appeal
     *
     * @return string
     */
    public function getLevelOfAppeal()
    {
        return $this->container['level_of_appeal'];
    }

    /**
     * Sets level_of_appeal
     *
     * @param string $level_of_appeal Subject-matter jurisdiction (local, federal, high court, ...)
     *
     * @return $this
     */
    public function setLevelOfAppeal($level_of_appeal)
    {
        if (!is_null($level_of_appeal) && (mb_strlen($level_of_appeal) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_of_appeal when calling Court., must be smaller than or equal to 100.');
        }

        $this->container['level_of_appeal'] = $level_of_appeal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


