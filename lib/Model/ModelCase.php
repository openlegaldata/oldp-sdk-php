<?php
/**
 * ModelCase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open Legal Data API
 *
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelCase Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelCase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Case';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'slug' => 'string',
        'court' => '\Swagger\Client\Model\CourtMinimal',
        'file_number' => 'string',
        'date' => '\DateTime',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'type' => 'string',
        'ecli' => 'string',
        'content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'slug' => null,
        'court' => null,
        'file_number' => null,
        'date' => 'date',
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'type' => null,
        'ecli' => null,
        'content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'slug' => 'slug',
        'court' => 'court',
        'file_number' => 'file_number',
        'date' => 'date',
        'created_date' => 'created_date',
        'updated_date' => 'updated_date',
        'type' => 'type',
        'ecli' => 'ecli',
        'content' => 'content'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'slug' => 'setSlug',
        'court' => 'setCourt',
        'file_number' => 'setFileNumber',
        'date' => 'setDate',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'type' => 'setType',
        'ecli' => 'setEcli',
        'content' => 'setContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'slug' => 'getSlug',
        'court' => 'getCourt',
        'file_number' => 'getFileNumber',
        'date' => 'getDate',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'type' => 'getType',
        'ecli' => 'getEcli',
        'content' => 'getContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['court'] = isset($data['court']) ? $data['court'] : null;
        $this->container['file_number'] = isset($data['file_number']) ? $data['file_number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['ecli'] = isset($data['ecli']) ? $data['ecli'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_number'] === null) {
            $invalidProperties[] = "'file_number' can't be null";
        }
        if ((mb_strlen($this->container['file_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'file_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 100)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ecli']) && (mb_strlen($this->container['ecli']) > 255)) {
            $invalidProperties[] = "invalid value for 'ecli', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets court
     *
     * @return \Swagger\Client\Model\CourtMinimal
     */
    public function getCourt()
    {
        return $this->container['court'];
    }

    /**
     * Sets court
     *
     * @param \Swagger\Client\Model\CourtMinimal $court court
     *
     * @return $this
     */
    public function setCourt($court)
    {
        $this->container['court'] = $court;

        return $this;
    }

    /**
     * Gets file_number
     *
     * @return string
     */
    public function getFileNumber()
    {
        return $this->container['file_number'];
    }

    /**
     * Sets file_number
     *
     * @param string $file_number File number as defined by court
     *
     * @return $this
     */
    public function setFileNumber($file_number)
    {
        if ((mb_strlen($file_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $file_number when calling ModelCase., must be smaller than or equal to 100.');
        }

        $this->container['file_number'] = $file_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Publication date as in source
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Entry is created at this date time
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime $updated_date Date time of last change
     *
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of decision (Urteil, Beschluss, ...)
     *
     * @return $this
     */
    public function setType($type)
    {
        if (!is_null($type) && (mb_strlen($type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $type when calling ModelCase., must be smaller than or equal to 100.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ecli
     *
     * @return string
     */
    public function getEcli()
    {
        return $this->container['ecli'];
    }

    /**
     * Sets ecli
     *
     * @param string $ecli European Case Law Identifier
     *
     * @return $this
     */
    public function setEcli($ecli)
    {
        if (!is_null($ecli) && (mb_strlen($ecli) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ecli when calling ModelCase., must be smaller than or equal to 255.');
        }

        $this->container['ecli'] = $ecli;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Case full-text formatted in Legal HTML
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


